!function(t){var e={};function n(s){if(e[s])return e[s].exports;var a=e[s]={i:s,l:!1,exports:{}};return t[s].call(a.exports,a,a.exports,n),a.l=!0,a.exports}n.m=t,n.c=e,n.d=function(t,e,s){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:s})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var s=Object.create(null);if(n.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var a in t)n.d(s,a,function(e){return t[e]}.bind(null,a));return s},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=1)}([function(t,e){t.exports={Router:(t={})=>new Proxy(t,{get:(t,e,n)=>"handle"===e?async(e,...n)=>{for(let[s,a]of t.r.filter(t=>t[2]===e.method||"ALL"===t[2])){let t,o,r;if(t=(r=new URL(e.url)).pathname.match(s)){e.params=t.groups,e.query=e.query||Object.fromEntries(r.searchParams.entries());for(let t of a)if(void 0!==(o=await t(e.proxy||e,...n)))return o}}}:(s,...a)=>(t.r=t.r||[]).push([`^${((t.base||"")+s).replace(/(\/?)\*/g,"($1.*)?").replace(/\/$/,"").replace(/:(\w+|\()(\?)?(\.)?/g,"$2(?<$1>[^/$3]+)$2$3").replace(/\.(?=[\w(])/,"\\.")}/*$`,a,e.toUpperCase()])&&n})}},function(t,e,n){"use strict";n.r(e);var s=n(0);const a=Object(s.Router)(),o=["/dns4/node0.preload.ipfs.io/tcp/443/wss/p2p/QmZMxNdpMkewiVZLMRxaNxUeZpDUb34pWjZ1kZvsd16Zic","/dns4/node1.preload.ipfs.io/tcp/443/wss/p2p/Qmbut9Ywz9YEDrz8ySBSgWyJk41Uvm2QJPhwDJzJyGFsD6","/dns4/node2.preload.ipfs.io/tcp/443/wss/p2p/QmV7gnbW5VTcJ3oyM2Xk1rdFBJ3kTkvxc87UFGsun29STS","/dns4/node3.preload.ipfs.io/tcp/443/wss/p2p/QmY7JB6MQXhxHvq7dBDh4HpbH29v4yE9JRadAVpndvzySN"],r={"Access-Control-Allow-Origin":"*","Access-Control-Allow-Methods":"POST","Access-Control-Max-Age":"86400"};a.options("/pinset/:did/request",async t=>new Response(null,{headers:r})),a.options("/pinset/:did/request/:pinsetRecordID",async t=>new Response(null,{headers:r})),a.get("/pinset/:did/latest",async t=>{const e=await PINS.get(t.params.did);return e?new Response(JSON.stringify({latestCommitId:e}),{headers:{"Content-Type":"application/json",...r},status:200}):new Response(JSON.stringify({status:"Not Found"}),{headers:{"Content-Type":"application/json",...r},status:404})}),a.get("/pinset/:did/request/:pinsetRecordID",async t=>{const e=await fetch("https://gateway.ceramic.network/api/v0/streams/"+t.params.pinsetRecordID),n=await e.json();if(!n||!n.state||!n.state.metadata)return new Response(JSON.stringify({error:"Malformed response"}),{headers:{"Content-Type":"application/json",...r},status:500});if(!n.state.metadata.controllers.includes(t.params.did))return new Response(JSON.stringify({error:"Record not controlled by DID"}),{headers:{"Content-Type":"application/json",...r},status:400});if(!(n.state.content&&n.state.content.root||n.state.next&&n.state.next.content.root))return new Response(JSON.stringify({error:"Bad record found"}),{headers:{"Content-Type":"application/json",...r},status:400});const s=(n.state.next?n.state.next.content:n.state.content).root.replace("ipfs://",""),a=await PINS.get(s);if(!a)return new Response(JSON.stringify({status:"Not Found"}),{headers:{"Content-Type":"application/json",...r},status:404});const o=await fetch("https://api.pinata.cloud/psa/pins/"+a,{method:"GET",headers:{Authorization:"Bearer "+PINATA_ACCESS_TOKEN}}),i=await o.json();return i.status?("pinned"==i.status&&await PINS.put(t.params.did,t.params.pinsetRecordID),new Response(JSON.stringify({status:i.status}),{headers:{"Content-Type":"application/json",...r},status:200})):new Response(JSON.stringify({error:"Malformed pin response"}),{headers:{"Content-Type":"application/json",...r},status:500})}),a.post("/pinset/:did/request",async t=>{const e=await t.json();if(!e.pinsetRecordID)return new Response(JSON.stringify({error:"Could not find field 'pinsetRecordID'"}),{headers:{"Content-Type":"application/json",...r},status:400});const n=await fetch("https://gateway.ceramic.network/api/v0/streams/"+e.pinsetRecordID),s=await n.json();if(!s||!s.state||!s.state.metadata)return new Response(JSON.stringify({error:"Malformed response"}),{headers:{"Content-Type":"application/json",...r},status:500});if(!s.state.metadata.controllers.includes(t.params.did))return new Response(JSON.stringify({error:"Record not controlled by DID"}),{headers:{"Content-Type":"application/json",...r},status:400});if(!(s.state.content&&s.state.content.root||s.state.next&&s.state.next.content.root))return new Response(JSON.stringify({error:"Bad record found"}),{headers:{"Content-Type":"application/json",...r},status:400});const a=(s.state.next?s.state.next.content:s.state.content).root.replace("ipfs://",""),i=await PINS.get(a);if(i){const n=await fetch("https://api.pinata.cloud/psa/pins/"+i,{method:"GET",headers:{Authorization:"Bearer "+PINATA_ACCESS_TOKEN}}),s=await n.json();return s.status?("pinned"==s.status&&await PINS.put(t.params.did,e.pinsetRecordID),new Response(JSON.stringify({status:s.status}),{headers:{"Content-Type":"application/json",...r},status:200})):new Response(JSON.stringify({error:"Malformed pin response: "+s}),{headers:{"Content-Type":"application/json",...r},status:500})}const p=await fetch("https://api.pinata.cloud/psa/pins",{method:"POST",headers:{Authorization:"Bearer "+PINATA_ACCESS_TOKEN,"Content-Type":"application/json"},body:JSON.stringify({name:a,cid:a,origins:o})}),d=await p.json();return d.status?(await PINS.put(a,d.requestid),"pinned"==d.status&&await PINS.put(t.params.did,e.pinsetRecordID),new Response(JSON.stringify({status:d.status}),{headers:{"Content-Type":"application/json",...r},status:201})):new Response(JSON.stringify({error:"Malformed pin response: "+d}),{headers:{"Content-Type":"application/json",...r},status:500})}),a.all("*",()=>new Response("404, not found!",{status:404})),addEventListener("fetch",t=>{t.respondWith(a.handle(t.request))})}]);